MCPi Build Summary to date

This file is a full project reference for my MCPi server and its ecosystem (Radicale, Samba, backups, VPN, etc). Please read and internalize the contents so we can pick up exactly where I left off. The file includes system architecture, current setup, goals, known issues, and documentation planning. I‚Äôd like you to treat it as the master context for this and future tasks.

This project started as secondary to an idea I had for a Heads Up Display style UI, based on something like Avatar (the blue people), Tron:Legacy, or, as you pointed out, Mass Effect. While working on that, I realized the Pi was massively under utilized and off we went. Below is a summary from that chat, generated by you, for you. Hehehe

=== Chat 3 Summary ===
You‚Äôve been building and refining MCPi, a Raspberry Pi-based home server project designed with modularity, security, and self-hosted services in mind. The server runs from a minimal SD card setup and uses an external 2TB drive for most storage. You‚Äôve mounted the external drive under /mnt/mcpi_data and created specific partitions and scripts to manage its mounting and access.

You‚Äôve successfully set up and tested:
	‚Ä¢	Pi-hole for network-wide ad-blocking
	‚Ä¢	WireGuard VPN with working iPhone and MacBook clients
	‚Ä¢	Samba for file sharing on the LAN, including encrypted folders using gocryptfs
	‚Ä¢	Caddy as a reverse proxy, serving services over HTTPS under *.mcpi.lan
	‚Ä¢	A Radicale CalDAV server for hosting personal and shared calendars
	‚Ä¢	Backup systems using systemd timers and shell scripts, with backup files stored as compressed archives
	‚Ä¢	A vault for documentation in Markdown, using MkDocs and a Material theme for web-based access
	‚Ä¢	A system vitals script showing key info like CPU temp, storage, and service health

You explored:
	‚Ä¢	Mounting encrypted drives only when needed, with auto-unmounts after idle time
	‚Ä¢	Creating shared folders with correct Samba permissions
	‚Ä¢	Using symlinks to expose encrypted directories securely via Samba
	‚Ä¢	Setting up automatic backups with retention limits
	‚Ä¢	Creating recovery tooling with platform-specific scripts (Linux, macOS, Windows) to open encrypted folders with password protection
	‚Ä¢	Auto-generating and archiving backups to a ‚ÄúRecovery‚Äù directory, with plans for local web-based documentation in HTML or Markdown
	‚Ä¢	Setting up the router‚Äôs interface behind a reverse proxy with its own subdomain on the local network

You had issues and resolved:
	‚Ä¢	Samba permission errors with encrypted mounts due to missing allow_other in FUSE config
	‚Ä¢	Errors from malformed systemd mount units for gocryptfs
	‚Ä¢	Certificate and hostname handling for internal HTTPS domains
	‚Ä¢	Permissions problems with Radicale and CalDAV shared calendars, which you resolved by setting up proper symlinks and updating Radicale‚Äôs rights configuration

You also discussed future goals:
	‚Ä¢	Making MCPi available as a plug-and-play solution for therapists and small businesses with HIPAA-level security
	‚Ä¢	Creating stylized dashboards (like Homer) or alternative UI tools with real-time stats
	‚Ä¢	Having backups auto-uploaded or retrievable securely by external devices (like your MacBook or iCloud)
	‚Ä¢	Enhancing the documentation with system maps, module-based setup guides, and Tron-themed visuals
	‚Ä¢	Consolidating shared calendars under a shared path to make family coordination easier, especially with the children‚Äôs schedules

Throughout the project, you‚Äôve maintained a clean separation of responsibilities between the SD card and the external drive, keeping only core boot and config files on the card. Your setup continues to evolve into a robust, fully-documented, and user-friendly home server that reflects care, precision, and long-term thinking.

=== Chat 2 Summary ===
You asked:
‚ÄúHow do I generate an SSH key for Termius into MCPi?‚Äù

I explained the core idea of SSH key pairs:
	‚Ä¢	The private key stays with the client (e.g., Termius or your Mac).
	‚Ä¢	The public key gets placed on the server (e.g., MCPi) in the authorized_keys file.

You asked:
‚ÄúIs there a way to generate the key on MCPi and copy it over to Termius (or any other terminal)?‚Äù

You clarified:
‚ÄúNot yet. I‚Äôm still thinking this through. When would I use MCPi to hold the private key and use a public key to ssh in?‚Äù

I explained:
	‚Ä¢	You‚Äôd only have MCPi hold a private key if it needs to initiate connections to other systems (e.g., pushing backups to another server, pulling code from GitHub).
	‚Ä¢	In most cases, when you‚Äôre connecting into MCPi from your Mac or iPhone, the private key stays on the client (Termius, Mac Terminal) and the public key goes to MCPi.

You summarized it well:
‚ÄúSo, I‚Äôm going to keep the private key in Termius (or xterm or Mac‚Äôs terminal), and the public key (i.e. lock) will remain on the server. Or do I need to generate a key pair for each connection?‚Äù

I responded:
	‚Ä¢	You can use one key pair for multiple servers if you want convenience.
	‚Ä¢	Use separate key pairs if you want to compartmentalize access, separate devices, or improve security.
	‚Ä¢	If you‚Äôre the only user and you trust your environments, a single key pair is fine.

Then you said:
‚ÄúNo thanks, I‚Äôm looking for how to generate the key on MCPi and import it into Termius on my iPhone.‚Äù

I gave you these step-by-step instructions:
	1.	On MCPi, run:
ssh-keygen -t rsa -b 4096 -f ~/.ssh/mcpi_termius_key
That generates the private and public key pair.
	2.	Get the private key onto your iPhone using one of these methods:
A. Show the private key with cat ~/.ssh/mcpi_termius_key, then copy it to your Mac and AirDrop or paste it into Termius on your iPhone.
B. Use scp to copy the private key file from MCPi to your Mac, then AirDrop the file to your iPhone.
C. As a last resort, email the private key to yourself only if it‚Äôs protected with a strong passphrase. Be sure to delete the email afterward.
	3.	In Termius on your iPhone:
	‚Ä¢	Go to Keychain
	‚Ä¢	Tap the plus (+) icon
	‚Ä¢	Import the private key from clipboard or file
	‚Ä¢	Name it something like MCPi-Key
	‚Ä¢	Use it in your host settings to connect to servers as needed
	4.	Optionally, delete the private key from MCPi if it‚Äôs no longer needed there.

I also recommended setting a passphrase on the key and backing it up securely in a password manager.

=== Chat 1 Summary ===
‚úÖ WireGuard + Pi-hole VPN Setup Review

üîß WireGuard Configuration
	‚Ä¢	Your wg0.conf and chris-iphone.conf files are correctly configured for:
	‚Ä¢	A secure connection between your Pi (10.0.0.1) and your iPhone (10.0.0.2)
	‚Ä¢	Full internet traffic tunneling through the VPN (AllowedIPs = 0.0.0.0/0, ::/0)
	‚Ä¢	NAT masquerading via iptables for traffic routing
	‚Ä¢	DDNS endpoint: cmrk.ddns.net:51820

üß™ Status Checks:
	‚Ä¢	pihole status shows DNS (port 53) is active on both IPv4 and IPv6.
	‚Ä¢	Pi-hole is actively blocking ads.
	‚Ä¢	Netstat confirms that Pi-hole FTL is bound to port 53 as expected.

‚∏ª

üß© Issue Investigated: Missing setupVars.conf
	‚Ä¢	setupVars.conf was not found, despite a functioning Pi-hole install.
	‚Ä¢	You discovered that /etc/pihole/pihole.toml is present, which is part of:
	‚Ä¢	Pi-hole‚Äôs modern configuration format (TOML-based)
	‚Ä¢	Introduced in newer installations or with FTL-mode config
	‚Ä¢	Your setup is using this newer backend, so the absence of setupVars.conf is not a problem.

‚∏ª

üß≠ Next Steps (Optional)

You‚Äôre now ready to:
	‚Ä¢	Test VPN DNS routing by connecting your iPhone to WireGuard and verifying DNS resolution is happening via the Pi-hole (we can walk through how to confirm that).
	‚Ä¢	Edit Pi-hole settings (if needed) via the new /etc/pihole/pihole.toml file (with caution).

=== Detailed ===
You‚Äôre using a newer version of Pi-hole that does not use setupVars.conf anymore. Instead, your setup uses a modern configuration file called pihole.toml.

Your system shows:
	‚Ä¢	pihole.toml is present in /etc/pihole
	‚Ä¢	setupVars.conf is missing
	‚Ä¢	pihole status shows Pi-hole is running and blocking
	‚Ä¢	Port 53 is correctly being handled by pihole-FTL
	‚Ä¢	Your WireGuard server and client configs appear correctly structured

This means:
	‚Ä¢	You installed Pi-hole using a newer backend
	‚Ä¢	Your version of Pi-hole is likely from 2023‚Äì2024
	‚Ä¢	You‚Äôre using the structured TOML format for config instead of the old shell-style config

You can safely ignore the missing setupVars.conf message. For newer systems (like Raspberry Pi OS Bookworm), this is expected behavior.

To edit Pi-hole config now, use:

sudo nano /etc/pihole/pihole.toml

Before making changes, back up the config:

sudo cp /etc/pihole/pihole.toml /etc/pihole/pihole.toml.bak

Pi-hole will still work normally with commands like:

pihole -g
pihole -r

You‚Äôre on the modern config path. Nothing is broken ‚Äî your system is just ahead of older documentation.

And that‚Äôs all I could get before the chat automatically deletes it, I‚Äôm thinking because it‚Äôs so full. Heh we worked it!